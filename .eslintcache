[{"D:\\web projects\\react-app\\src\\index.js":"1","D:\\web projects\\react-app\\src\\App.js":"2","D:\\web projects\\react-app\\src\\reportWebVitals.js":"3","D:\\web projects\\react-app\\src\\components\\counter.jsx":"4","D:\\web projects\\react-app\\src\\components\\counters.jsx":"5","D:\\web projects\\react-app\\src\\components\\navbar.jsx":"6"},{"size":546,"mtime":1609012058937,"results":"7","hashOfConfig":"8"},{"size":1519,"mtime":1609017232012,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1545,"mtime":1608956415148,"results":"11","hashOfConfig":"8"},{"size":638,"mtime":1609016271840,"results":"12","hashOfConfig":"8"},{"size":437,"mtime":1609017044139,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p0ox0a",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\web projects\\react-app\\src\\index.js",[],"D:\\web projects\\react-app\\src\\App.js",[],"D:\\web projects\\react-app\\src\\reportWebVitals.js",[],["28","29"],"D:\\web projects\\react-app\\src\\components\\counter.jsx",["30","31"],"import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    // state = { \r\n    //     value : this.props.counter.value\r\n    //     // tags: ['tag1', 'tag2', 'tag3']\r\n    //  }\r\n\r\n     constructor (props){\r\n         super(props);\r\n        //  this.handleIncrement = this.handleIncrement.bind(this);\r\n        //  console.log(this);\r\n     }\r\n    \r\n    render() { \r\n        console.log(this.props);\r\n        return <div>\r\n            {this.props.children}\r\n            <span  className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm m-2\">Increment</button>\r\n        <button className=\"btn-danger m-2\" onClick={() => this.props.onDelete(this.props.counter.id)}>Delete</button>\r\n        \r\n        <button onClick={() => this.props.onDecrement(this.props.counter)} className=\"btn btn-secondary btn-sm m-2\">Decrement</button>\r\n        {/* <button onClick={(e) => { this.setCounter(e)}} className=\"btn btn-secondary btn-sm m-2\">Set counter</button> */}\r\n        {/* <ul>\r\n            {this.state.tags.map(tag =>  <li key={tag}>{tag}</li>)}\r\n        </ul> */}\r\n        </div>\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount (){\r\n        const {value} = this.props.counter;\r\n        return value == 0 ? \"Zero\" : value;\r\n    }\r\n}\r\n \r\nexport default Counter;","D:\\web projects\\react-app\\src\\components\\counters.jsx",[],"D:\\web projects\\react-app\\src\\components\\navbar.jsx",["32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":9,"column":6,"nodeType":"39","messageId":"40","endLine":13,"endColumn":7},{"ruleId":"41","severity":1,"message":"42","line":39,"column":22,"nodeType":"43","messageId":"44","endLine":39,"endColumn":24},{"ruleId":"45","severity":1,"message":"46","line":9,"column":11,"nodeType":"47","endLine":9,"endColumn":48},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]